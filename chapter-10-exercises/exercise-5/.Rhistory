# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount)]
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv")
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), ]
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv")
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), grants$organization]
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv")
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
# Which organization received the smallest grant?
grants[grants$total_amount == min(grants$total_amount), "organization"]
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
# Which organization received the smallest grant?
grants[grants$total_amount == min(grants$total_amount), "organization"]
# How many grants were awarded in 2010?
sum(grants[grants$start_year == "2010", ])
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
# Which organization received the smallest grant?
grants[grants$total_amount == min(grants$total_amount), "organization"]
# How many grants were awarded in 2010?
ncol(grants[grants$start_year == "2010", ])
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv(female_names.csv, stringsAsFactors = FALSE)
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("female_names.csv", stringsAsFactors = FALSE)
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
setwd("~/OneDrive - UW/2020 Spring/INFO 201/book-exercises/chapter-10-exercises/exercise-5")
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
View(names)
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
names_2013
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
View(grants)
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_in_year <- names[names$year == year, ]
return names_in_year[names_in_year == max(names_in_year), "name"]
}
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_in_year <- names[names$year == year, ]
return(names_in_year[names_in_year == max(names_in_year), "name"])
}
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_in_year <- names[names$year == year, ]
return(names_in_year[names_in_year == max(names_in_year), "name"])
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_in_year <- names[names$year == year, ]
return(names_in_year[names_in_year == max(names_in_year), "name"])
}
# What was the most popular female name in 1994?
most_popular_in_year("1994")
x <- 1995
names[names$year == x, ]
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_in_year <- names[names$year == year, ]
return(names_in_year[names_in_year$prop == max(names_in_year), "name"])
}
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_in_year <- names[names$year == year, ]
return(names_in_year[names_in_year$prop == max(names_in_year), "name"])
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_in_year <- names[names$year == year, ]
return(names_in_year[names_in_year$prop == max(names_in_year$prop), "name"])
}
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_in_year <- names[names$year == year, ]
return(names_in_year[names_in_year$prop == max(names_in_year$prop), "name"])
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
name_in_year <- names[names$year == 1994 & names$name == "Jessica", "prop"]
name_in_year
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_in_year <- names[names$year == year, ]
return(names_in_year[names_in_year$prop == max(names_in_year$prop), "name"])
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
return(names[names$year == year & names$name == name, "prop"] * 1000000)
}
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_in_year <- names[names$year == year, ]
return(names_in_year[names_in_year$prop == max(names_in_year$prop), "name"])
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
return(names[names$year == year & names$name == name, "prop"] * 1000000)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_in_year <- names[names$year == year, ]
return(names_in_year[names_in_year$prop == max(names_in_year$prop), "name"])
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
return(names[names$year == year & names$name == name, "prop"] * 1000000)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("Sam", 2000)
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_in_year <- names[names$year == year, ]
return(names_in_year[names_in_year$prop == max(names_in_year$prop), "name"])
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
return(names[names$year == year & names$name == name, "prop"] * 1000000)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("Samantha", 2000)
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("data/female_names.csv", stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == "2013",]
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year) {
names_in_year <- names[names$year == year, ]
return(names_in_year[names_in_year$prop == max(names_in_year$prop), "name"])
}
# What was the most popular female name in 1994?
most_popular_in_year(1994)
# Write a function `number_in_million` that takes in a name and a year, and
# returns statistically how many babies out of 1 million born that year have
# that name.
# Hint: get the popularity percentage, and take that percentage out of 1 million.
number_in_million <- function(name, year) {
return(names[names$year == year & names$name == name, "prop"] * 1000000)
}
# How many babies out of 1 million had the name 'Laura' in 1995?
number_in_million("Laura", 1995)
# How many babies out of 1 million had your name in the year you were born?
number_in_million("Sam", 2000)
# Exercise 4: external data sets: Gates Foundation Educational Grants
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
# Which organization received the smallest grant?
grants[grants$total_amount == min(grants$total_amount), "organization"]
# How many grants were awarded in 2010?
nrow(grants[grants$start_year == "2010", ])
